% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/constrainedX.R
\name{\%Xc\%}
\alias{\%Xc\%}
\title{Constrained row tensor product}
\usage{
bl1 \%Xc\% bl2
}
\arguments{
\item{bl1}{base-learner 1, e.g. \code{bols(x1)}}

\item{bl2}{base-learner 2, e.g. \code{bols(x2)}}
}
\description{
EXPERIMENTAL! Combining single base-learners to form new, more complex base-learners, with
an identifiability constraint suitable for functional response.
}
\details{
Similar to \code{\%X\%} in package mboost, see ?"\%X\%", a tensor product of two
or more linear base-learners is returned by \code{\%Xc\%}.
But \code{\%Xc\%} applies a sum-to-zero constraint to the design matrix suitable for
functional response if an interaction of two scalar covariates is specified.
}
\examples{
######## Example for function-on-scalar-regression with interaction effect of two scalar covariates
data("viscosity", package = "FDboost")
## set time-interval that should be modeled
interval <- "101"

## model time until "interval" and take log() of viscosity
end <- which(viscosity$timeAll == as.numeric(interval))
viscosity$vis <- log(viscosity$visAll[,1:end])
viscosity$time <- viscosity$timeAll[1:end]
# with(viscosity, funplot(time, vis, pch = 16, cex = 0.2))

## fit median regression model with 100 boosting iterations,
## step-length 0.4 and smooth time-specific offset
## the factors are coded such that the intercept is the global median
## no integration weights are used!
mod1 <- FDboost(vis ~ 1 + bolsc(T_C, df=2) + bolsc(T_A, df=2) +
                bols(T_C, df=2) \%Xc\% bols(T_A, df=1),
                timeformula = ~bbs(time, df=3),
                numInt = "equal", family = QuantReg(),
                offset = NULL, offset_control = o_control(k_min = 9),
                data = viscosity, control=boost_control(mstop = 100, nu = 0.4))
}

